--------------------------------------------------------------------------------------
-- Gra2MoL transformation definition
-- Author: Martina De Sanctis
--------------------------------------------------------------------------------------

rule 'createAemiliaSpec'
	from file f
	to AEmiliaSpecification 
	queries
		mains : //#archi_type;
	mappings
		archiTypeDecl = mains;
end_rule

rule 'mapArchiType'
	from archi_type at  
	to ArchiType 
	queries
		name : /#at;
		intest : /at//#archi_header;
		aet : /at//#archi_elem_types;
		topology : /at//#archi_topology;
	mappings
		atName = name.WORD; 		
		header = intest;
		aetDeclaration = aet;
		atDeclaration = topology;
end_rule

rule 'mapArchiHeader'
	from archi_header ah
	to Headers::AT_Header
	queries
		const : /ah/init_constant_list/#init_constant;	
	mappings
		initConst = const;
end_rule

rule 'constInitialization'
	from init_constant i
	to Headers::ConstInit
	queries
		name : /i/#constName;
		typeNormal : /i/dataType/#normalType{TOKEN.exists};
		typeSpecial : /i/dataType/#specialType{TOKEN.exists};
		exp : /i/#expr;
	mappings
		name = name.WORD;
		if(typeNormal.hasResults) then
			initConstData = typeNormal;
		else
			initConstData = typeSpecial;
		end_if
		initConstExpr = exp;
end_rule

rule 'mapSpecialType'
	from specialType st
	to DataType::Special
	queries
		typeName : /#st;
	mappings
		type = typeName.TOKEN;
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("boolean")} nt
	to DataType::Boolean
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("real")} nt
	to DataType::Real
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("integer")  && !TOKEN[1].exists && !TOKEN[2].exists} nt
	to DataType::Integer
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("integer") && TOKEN[1].exists && TOKEN[2].exists} nt
	to DataType::RangeInt
	queries
		minv : /#nt;
		maxv : /#nt;	
	mappings
		minVal = minv.NUMBER[0];
		maxVal = maxv.NUMBER[1];		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("list")} nt
	to DataType::List
	queries
		type : /nt/#normalType;
	mappings	
		listElemType = type;	
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("array")} nt
	to DataType::Array
	queries
		len : /#nt;
		type : /nt/#normalType;
	mappings
		lenght = len.DIGIT;
		arrayElemType = type;		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("record")} nt
	to DataType::Record
	queries
		var : /nt/#recordList;
	mappings
		field_decl_seq = extract var;
end_rule

rule 'mapArchiElemTypes'
	from archi_elem_types aet
	to ArchiElemTypes
	queries
		elemTypes : /aet//#elem_type;		
	mappings
		etDeclaration = elemTypes;
end_rule

rule 'mapElemTypes'
	from elem_type et
	to ElemType
	queries
		name : /#et;
		elemHeader : /et/#et_header;
		inputInt : /et//interaction_list_input//#interactionInput;	
		outputInt : /et//interaction_list_output//#interactionOutput;
		behavior : /et/#behavior_equation_list;
	mappings
		etName = name.WORD;
		elemHeader = elemHeader;
		iiDecl = inputInt;
		oiDecl = outputInt;
		behaviorDecl = behavior;
end_rule

rule 'mapBehaviorEquations'
	from behavior_equation_list bel
	to Behavior::Behavior
	queries
		first_eq : /bel/#first_equation;
		list : /bel/equations_list/#equations;
	mappings
		equations = first_eq;
		equations = list;
end_rule

rule 'mapEquation'
	from first_equation equation
	to Behavior::BehavEquation
	queries
		name : /#equation;
		h : /equation/#behavior_header_first;
		process : /equation/#processTerm;
	mappings
		name = name.WORD;
		pt = process;
		bHeader = h;
end_rule

rule 'mapHeaderFirstEq'
	from behavior_header_first bhf
	to Headers::BehavHeader
	queries
		leftPart : /bhf/#leftSide_first;
		rightPart : /bhf/#rightSide;
	mappings
		left = leftPart;
		right = rightPart;
end_rule

rule 'mapLeftSideFirst'
	from leftSide_first lf
	to Headers::LeftSide
	queries
		var : /lf/#varInit;
	mappings
		initVar = var;
end_rule

rule 'mapVarInitialization'
	from varInit vi
	to Headers::VarInit
	queries
		name : /#vi;
		type : /vi/#normalType;
		exp : /vi/#expr;
	mappings
		name = name.WORD;
		initVarType = type;
		initVarExpr = exp;
end_rule

rule 'mapRightSideFirst'
	from rightSide rs
	to Headers::RightSide
	queries
		loc : /rs/#local;
	mappings
		localDef = loc;
end_rule

rule 'mapLocalVar'
	from local loc
	to Headers::Local
	queries
		name : /#loc;
		type : /loc/#normalType;
	mappings
		name = name.WORD;
		localType = type;
end_rule

rule 'mapEquation'
	from equations equation
	to Behavior::BehavEquation
	queries
		name : /#equation;
		h : /equation/#behavior_header;
		process : /equation/#processTerm;
	mappings
		name = name.WORD;
		bHeader = h;
		pt = process;
end_rule

rule 'mapHeaderEq'
	from behavior_header bh
	to Headers::BehavHeader
	queries
		leftPart : /bh/#leftSide;
		rightPart : /bh/#rightSide;
	mappings
		left = leftPart;
		right = rightPart;
end_rule

rule 'mapLeftSide'
	from leftSide lf
	to Headers::LeftSide
	queries
		var : /lf/#var;
	mappings
		varDef = var;
end_rule

rule 'mapVar'
	from var v
	to Headers::Var
	queries
		name : /#v;
		type : /v/#normalType;
	mappings
		name = name.WORD;
		varType = type;
end_rule

rule 'mapElemHeader'
	from et_header eh
	to Headers::ET_Header
	queries
		const : /eh/constant_list/#constant;	
	mappings
		costant = const;
end_rule

rule 'constantDef'
	from constant i
	to Headers::Const
	queries
		name : /i/#constName;
		typeNormal : /i/dataType/#normalType{TOKEN.exists};
		typeSpecial : /i/dataType/#specialType{TOKEN.exists};
	mappings
		name = name.WORD;
		if(typeNormal.hasResults) then
			constantData = typeNormal;
		else
			constantData = typeSpecial;
		end_if
end_rule

rule 'mapInteractionListInput'
	from interactionInput int
	to InputInteraction
	queries
		name : //#int;
		type : /int/#interaction_type;
	mappings
		intName = name.WORD;
		type = type.TOKEN;

end_rule

rule 'mapInteractionListOutput'
	from interactionOutput int
	to OutputInteraction
	queries
		name : //#int;	
		type : /int/#interaction_type;
	mappings
		intName = name.WORD;
		type = type.TOKEN;

end_rule

rule 'mapArchiTopology'
	from archi_topology at
	to ArchiTopology
	queries
		istances : /at/archi_elem_instances//#instances;	
		attach : /at/archi_attachments/attachment_list/#attachment;	
		archiInt : /at/archi_interactions/archi_interaction_list/#archi_interaction;
	mappings
		aeiDecl = istances;
		attDecl = attach;
		aiDecl = archiInt;
end_rule

rule 'mapIstances'
	from instances i
	to ArchiElemInstance
	queries
		name : /#i;
		param : /i//#parList;
		actualType : /i//#elementType;
		locatedType : //#elem_type{WORD.exists && WORD.eq(actualType.WORD)};
	mappings
		instanceName = name.WORD;
		actualParam = param.WORD*;
		TypeOf = locatedType;
end_rule

rule'mapArchiInteraction'
	from archi_interaction at
	to ArchitecturalInteraction
	queries
		istName : //at/#istanceName;
		interactName : //at/#interactionName;
		localIntInput : //interaction_list_input//#interactionInput{WORD.exists && WORD.eq(interactName.WORD)}; 
		localIntOutput : //interaction_list_output//#interactionOutput{WORD.exists && WORD.eq(interactName.WORD)};
		instance : //#instances{WORD.exists && WORD.eq(istName.WORD)};
	mappings
		name = istName.WORD + "." +interactName.WORD;
		if(localIntInput.hasResults)then
			Is_A = localIntInput;	
		end_if
		if(localIntOutput.hasResults)then
			Is_A = localIntOutput;	
		end_if	
		fromInstance = instance;
end_rule

rule 'mapAttachement'
	from attachment att
	to Attachment 
	queries
		end : /att/#toPart;
		start : /att/#fromPart;
	mappings
		end = end;
		start = start;
end_rule

rule 'mapTo'
	from toPart n
	to To
	queries
		istName : /n/#istanceNameTo;
		intName : /n/#interactionNameTo;
		instance : //#instances{WORD.exists && WORD.eq(istName.WORD)};
		interaction : //interaction_list_input//#interactionInput{WORD.exists && WORD.eq(intName.WORD)}; 
	mappings
		toInstance = instance;
		isInput = interaction;
end_rule

rule 'mapFrom'
	from fromPart n
	to From
	queries
		istName : /n/#istanceNameFrom;
		intName : /n/#interactionNameFrom;
		instance : //#instances{WORD.exists && WORD.eq(istName.WORD)};
		interaction : //interaction_list_output//#interactionOutput{WORD.exists && WORD.eq(intName.WORD)}; 
	mappings
		fromInstance = instance;
		isOutput = interaction;		
end_rule
	
--------------------------------------------------
--RULES FOR PROCESS TERM
--------------------------------------------------

rule'mapProcessTermAction'
	from processTerm/#action{TOKEN.exists} pt
	to Behavior::ActionProcess
	queries
		next : /pt/process_term_1/#processTerm{TOKEN.exists};
		next2 : /pt/process_term_1/#behavEqInvocation{TOKEN.exists};
		action : /pt/#action; 
	mappings
		if(next.hasResults) then
			process = next;
		else
			process = next2;
		end_if
		act = action;
end_rule

rule'mapActionTypeInput'
 	from action_type{TOKEN.eq("?")} at
 	to Behavior::ActionInput 
 	queries
 		var : /at//#wordList;
 	mappings
 		if(var.hasResults)then
 			var = var.WORD*;
 		end_if
end_rule

rule'mapActionTypeOutput'
 	from action_type{TOKEN.eq("!")} at
 	to Behavior::ActionOutput 
 	queries
 		var : /at/expressionList//#expr;
 	mappings
 		if(var.hasResults)then
 			exprOutput = var;
 		end_if
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("exp")} ar
 	to Behavior::RateExp
 	queries
 		expr : /ar/#expr;
 	mappings
 		expr = expr;
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("inf") && !TOKEN[1].exists && !TOKEN[2].exists} ar
 	to Behavior::RateInf
 	queries
 	mappings
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("inf") && TOKEN[1].exists && TOKEN[2].exists} ar
 	to Behavior::RateInf
 	queries
 		prio : /ar/#expr[0];
 		wei : /ar/#expr[1];
 	mappings
 		if(prio.hasResults)then
 			inf_priority = prio;
 		end_if
 		if(wei.hasResults)then
 			inf_weight = wei;
 		end_if
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("_") && !TOKEN[1].exists && !TOKEN[2].exists} ar
 	to Behavior::RatePas
 	queries
 	mappings
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("_") && TOKEN[1].exists && TOKEN[2].exists} ar
 	to Behavior::RatePas
 	queries
 		prio : /ar/#expr[0];
 		wei : /ar/#expr[1];
 	mappings
 		if(prio.hasResults)then
 			priority = prio;
 		end_if
 		if(wei.hasResults)then
 			weight = wei;
 		end_if
end_rule

rule'mapEquationInvocation'
	from behavEqInvocation bei
	to Behavior::BehavProcess
	queries
		name : /bei//#eqName;
		exp : /bei/expressionList//#expr;
		equation : //#equations{WORD.exists && WORD.eq(name.WORD)};
		equationFirst : //#first_equation{WORD.exists && WORD.eq(name.WORD)};
	mappings
		if(exp.hasResults)then
 			exprs = exp;
 		end_if
 		if(equation.hasResults)then
 			eqCall = equation;
 		end_if
 		if(equationFirst.hasResults)then
 			eqCall = equationFirst;
 		end_if
		
end_rule

rule'mapProcessTermChoice'
	from processTerm{TOKEN.exists && TOKEN.eq("choice")} choice
	to Behavior::ChoiceProcess
	queries
		next : /choice/process_term_2_list/#process_term_2;
	mappings
		processes = next;
end_rule

rule 'mapProcessTermStop'
	from processTerm{TOKEN.exists && TOKEN.eq("stop")} stop
	to Behavior::Stop
	queries		
	mappings		
end_rule

--------------------------------------------------------------------------------
--RULE FOR PROCESS_TERM_2 / PROCESS TERM
--------------------------------------------------------------------------------

rule'mapProcessTerm2'
	from process_term_2/processTerm{TOKEN.exists && TOKEN.eq("choice")} choice
	to Behavior::ChoiceProcess
	queries
		next : /choice//process_term_2_list/#process_term_2;
		cond : /choice/condExpr/#expr;
	mappings
		processes = next;
		condition = cond;
end_rule

rule'mapProcessTermAction'
	from process_term_2/processTerm/#action{TOKEN.exists} pt
	to Behavior::ActionProcess
	queries
		next : /pt/processTerm/process_term_1/#processTerm{TOKEN.exists};
		next2 : /pt/processTerm/process_term_1/#behavEqInvocation{TOKEN.exists};
		action : /pt/processTerm/#action; 
		cond : /pt//condExpr/#expr;
	mappings
		if(next.hasResults) then
			process = next;
		else
			process = next2;
		end_if
		act = action;
		condition = cond;
end_rule

rule 'mapProcessTermStop'
	from process_term_2/processTerm{TOKEN.exists && TOKEN.eq("stop")} stop
	to Behavior::Stop
	queries	
		cond : /stop//condExpr/#expr;
	mappings
		condition = cond;		
end_rule

rule 'mapAction'
	from action act
	to Behavior::Action
	queries
		name : /act/#actionName;
		type : /act/#action_type{TOKEN.exists};
		rate : /act/#action_rate;
		isRelIn : //interaction_list_input//#interactionInput{WORD.exists && WORD.eq(name.WORD)}; 
		isRelOu : //interaction_list_output//#interactionOutput{WORD.exists && WORD.eq(name.WORD)};
		--actualType : /act//#elementType;
		belongs : //#elem_type//behavior_equation_list//processTerm//action/actionName{WORD.exists && WORD.eq(name.WORD)}; 
	mappings
		name = name.WORD;
		type = type;
		rate = rate;
		if(isRelIn.hasResults)then
			is = isRelIn;
		end_if
		if(isRelOu.hasResults)then
			is = isRelOu;
		end_if
		belongs = belongs;
end_rule

--------------------------------------------------
--RULES FOR EXPRESSIONS
--------------------------------------------------

rule 'mapExpression'  
	from expr/arithExpr a
	to Expressions::ArithExpr
	queries
		left : /a//#term[0];
		op : /a//#arithOp;
		right : /a//#term[1];
	mappings
		leftExprArith = left;
		operator = op.TOKEN;
		rightExprArith = right;
end_rule

rule 'mapExpression'  
	from expr/relationalExpr a
	to Expressions::RelationalExpr
	queries
		left : /a//#term[0];
		op : /a//#relatOp;
		right : /a//#term[1];
	mappings
		leftExprRel = left;
		operator = op.TOKEN;
		rightExprRel = right;
end_rule

rule 'mapExpression'  
	from expr/booleanExpr/boolOp{TOKEN.eq("&&") || TOKEN.eq("||")} a
	to Expressions::BooleanExpr
	queries
		left : /a//#term[0];
		op : /a//#boolOp;
		right : /a//#term[1];
	mappings
		leftExprBool = left;
		operator = op.TOKEN;
		rightExprBool = right;
end_rule

rule 'mapExpression'  
	from expr/booleanExpr/boolOp{TOKEN.eq("!")} a
	to Expressions::BooleanExpr
	queries
		right : /a//#term;
		op : /a//#boolOp;
	mappings
		operator = op.TOKEN;
		rightExprBool = right;
end_rule

rule 'mapExpression'  
	from expr/listExpr a
	to Expressions::ListExpr
	queries
		op : /a//#listOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		list_operands = operands;
end_rule

rule 'mapExpression'  
	from expr/arrayExpr a
	to Expressions::ArrayExpr
	queries
		op : /a//#arrayOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		array_operands = operands;
end_rule

rule 'mapExpression'  
	from expr/recordExpr a
	to Expressions::RecordExpr
	queries
		op : /a//#recordOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		record_operands = operands;
end_rule

rule 'mapExpression'  
	from expr/mathExpr a
	to Expressions::MathFunctions
	queries
		left : /a//#expr[0];
		op : /a//#mathOp;
		right : /a//#expr[1];
	mappings
		leftExprMath = left;
		name = op.TOKEN;
		if(right.hasResults)then
			rightExprMath = right;
		end_if
end_rule

rule 'mapExpression'  
	from expr/numGenExpr a
	to Expressions::Pseudo_random_num_gen
	queries
	    op : /a//#numGenOp;
		firstEl : /a//#expr[0];		
		second : /a//#expr[1];
		third : /a//#expr[2];
	mappings
		name = op.TOKEN;
		firstNumGenOp = firstEl;
		if(second.hasResults)then
			secondNumGenOp = second;
		end_if
		if(third.hasResults)then
			thirdNumGenOp = third;
		end_if
end_rule

---------------------------------------------------
----TERM RULES
---------------------------------------------------

rule 'mapTerm'
	from term t
	to Expressions::IdentExpr
	queries
		typeWord : /#t{WORD.exists};
		typeNum : /#t{NUMBER.exists};
		typeBool : /#t{WORD.exists && WORD.eq("true") ||  WORD.eq("false")};
	mappings
		if(typeWord.hasResults)then
			name = extract typeWord;
			type = "TYPED_IDENT";
		end_if
		if(typeNum.hasResults)then
			name = extract typeNum;
			type = "NUMERIC_CONST";
		end_if
		if(typeBool.hasResults)then
			name = extract typeBool;
			type = "TRUTH_VAL";
		end_if
end_rule

rule 'mapTerm'
	from expr t
	to Expressions::IdentExpr
	queries
		typeWord : /t/#term{WORD.exists};
		typeNum : /t/#term{NUMBER.exists};
		typeBool : /t/#term{WORD.exists && WORD.eq("true") ||  WORD.eq("false")};
	mappings
		if(typeWord.hasResults)then
			name = extract typeWord;
			type = "TYPED_IDENT";
		end_if
		if(typeNum.hasResults)then
			name = extract typeNum;
			type = "NUMERIC_CONST";
		end_if
		if(typeBool.hasResults)then
			name = extract typeBool;
			type = "TRUTH_VAL";
		end_if
end_rule



